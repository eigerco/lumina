// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(celestia_grpcFFI)
import celestia_grpcFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_celestia_grpc_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_celestia_grpc_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureCelestiaGrpcInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol TxClientProtocol: AnyObject, Sendable {
    
    /**
     * AppVersion of the client
     */
    func appVersion()  -> UInt64
    
    /**
     * Last gas price fetched by the client
     */
    func lastSeenGasPrice()  -> Double
    
    func submitBlobs(blobs: [Blob], config: TxConfig?) async throws  -> TxInfo
    
    func submitMessage(message: AnyMsg, config: TxConfig?) async throws  -> TxInfo
    
}
open class TxClient: TxClientProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_celestia_grpc_fn_clone_txclient(self.pointer, $0) }
    }
public convenience init(url: String, accountAddress: Address, accountPubkey: Data, signer: UniffiSigner)async throws  {
    let pointer =
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_celestia_grpc_fn_constructor_txclient_new(FfiConverterString.lower(url),FfiConverterTypeAddress_lower(accountAddress),FfiConverterData.lower(accountPubkey),FfiConverterTypeUniffiSigner_lower(signer)
                )
            },
            pollFunc: ffi_celestia_grpc_rust_future_poll_pointer,
            completeFunc: ffi_celestia_grpc_rust_future_complete_pointer,
            freeFunc: ffi_celestia_grpc_rust_future_free_pointer,
            liftFunc: FfiConverterTypeTxClient_lift,
            errorHandler: FfiConverterTypeGrpcError_lift
        )
        
        .uniffiClonePointer()
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_celestia_grpc_fn_free_txclient(pointer, $0) }
    }

    

    
    /**
     * AppVersion of the client
     */
open func appVersion() -> UInt64  {
    return try!  FfiConverterUInt64.lift(try! rustCall() {
    uniffi_celestia_grpc_fn_method_txclient_app_version(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Last gas price fetched by the client
     */
open func lastSeenGasPrice() -> Double  {
    return try!  FfiConverterDouble.lift(try! rustCall() {
    uniffi_celestia_grpc_fn_method_txclient_last_seen_gas_price(self.uniffiClonePointer(),$0
    )
})
}
    
open func submitBlobs(blobs: [Blob], config: TxConfig?)async throws  -> TxInfo  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_celestia_grpc_fn_method_txclient_submit_blobs(
                    self.uniffiClonePointer(),
                    FfiConverterSequenceTypeBlob.lower(blobs),FfiConverterOptionTypeTxConfig.lower(config)
                )
            },
            pollFunc: ffi_celestia_grpc_rust_future_poll_rust_buffer,
            completeFunc: ffi_celestia_grpc_rust_future_complete_rust_buffer,
            freeFunc: ffi_celestia_grpc_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeTxInfo_lift,
            errorHandler: FfiConverterTypeGrpcError_lift
        )
}
    
open func submitMessage(message: AnyMsg, config: TxConfig?)async throws  -> TxInfo  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_celestia_grpc_fn_method_txclient_submit_message(
                    self.uniffiClonePointer(),
                    FfiConverterTypeAnyMsg_lower(message),FfiConverterOptionTypeTxConfig.lower(config)
                )
            },
            pollFunc: ffi_celestia_grpc_rust_future_poll_rust_buffer,
            completeFunc: ffi_celestia_grpc_rust_future_complete_rust_buffer,
            freeFunc: ffi_celestia_grpc_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeTxInfo_lift,
            errorHandler: FfiConverterTypeGrpcError_lift
        )
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTxClient: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TxClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TxClient {
        return TxClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TxClient) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TxClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TxClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTxClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> TxClient {
    return try FfiConverterTypeTxClient.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTxClient_lower(_ value: TxClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTxClient.lower(value)
}






public protocol UniffiSigner: AnyObject, Sendable {
    
    func sign(doc: SignDoc) async throws  -> Signature
    
}
open class UniffiSignerImpl: UniffiSigner, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_celestia_grpc_fn_clone_uniffisigner(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_celestia_grpc_fn_free_uniffisigner(pointer, $0) }
    }

    

    
open func sign(doc: SignDoc)async throws  -> Signature  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_celestia_grpc_fn_method_uniffisigner_sign(
                    self.uniffiClonePointer(),
                    FfiConverterTypeSignDoc_lower(doc)
                )
            },
            pollFunc: ffi_celestia_grpc_rust_future_poll_rust_buffer,
            completeFunc: ffi_celestia_grpc_rust_future_complete_rust_buffer,
            freeFunc: ffi_celestia_grpc_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeSignature_lift,
            errorHandler: FfiConverterTypeSigningError_lift
        )
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceUniffiSigner {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceUniffiSigner] = [UniffiVTableCallbackInterfaceUniffiSigner(
        sign: { (
            uniffiHandle: UInt64,
            doc: RustBuffer,
            uniffiFutureCallback: @escaping UniffiForeignFutureCompleteRustBuffer,
            uniffiCallbackData: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<UniffiForeignFuture>
        ) in
            let makeCall = {
                () async throws -> Signature in
                guard let uniffiObj = try? FfiConverterTypeUniffiSigner.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try await uniffiObj.sign(
                     doc: try FfiConverterTypeSignDoc_lift(doc)
                )
            }

            let uniffiHandleSuccess = { (returnValue: Signature) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: FfiConverterTypeSignature_lower(returnValue),
                        callStatus: RustCallStatus()
                    )
                )
            }
            let uniffiHandleError = { (statusCode, errorBuf) in
                uniffiFutureCallback(
                    uniffiCallbackData,
                    UniffiForeignFutureStructRustBuffer(
                        returnValue: RustBuffer.empty(),
                        callStatus: RustCallStatus(code: statusCode, errorBuf: errorBuf)
                    )
                )
            }
            let uniffiForeignFuture = uniffiTraitInterfaceCallAsyncWithError(
                makeCall: makeCall,
                handleSuccess: uniffiHandleSuccess,
                handleError: uniffiHandleError,
                lowerError: FfiConverterTypeSigningError_lower
            )
            uniffiOutReturn.pointee = uniffiForeignFuture
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeUniffiSigner.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface UniffiSigner: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitUniffiSigner() {
    uniffi_celestia_grpc_fn_init_callback_vtable_uniffisigner(UniffiCallbackInterfaceUniffiSigner.vtable)
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUniffiSigner: FfiConverter {
    fileprivate static let handleMap = UniffiHandleMap<UniffiSigner>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = UniffiSigner

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> UniffiSigner {
        return UniffiSignerImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: UniffiSigner) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UniffiSigner {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: UniffiSigner, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUniffiSigner_lift(_ pointer: UnsafeMutableRawPointer) throws -> UniffiSigner {
    return try FfiConverterTypeUniffiSigner.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUniffiSigner_lower(_ value: UniffiSigner) -> UnsafeMutableRawPointer {
    return FfiConverterTypeUniffiSigner.lower(value)
}




public struct AnyMsg {
    public var type: String
    public var value: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(type: String, value: Data) {
        self.type = type
        self.value = value
    }
}

#if compiler(>=6)
extension AnyMsg: Sendable {}
#endif


extension AnyMsg: Equatable, Hashable {
    public static func ==(lhs: AnyMsg, rhs: AnyMsg) -> Bool {
        if lhs.type != rhs.type {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(type)
        hasher.combine(value)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAnyMsg: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AnyMsg {
        return
            try AnyMsg(
                type: FfiConverterString.read(from: &buf), 
                value: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: AnyMsg, into buf: inout [UInt8]) {
        FfiConverterString.write(value.type, into: &buf)
        FfiConverterData.write(value.value, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAnyMsg_lift(_ buf: RustBuffer) throws -> AnyMsg {
    return try FfiConverterTypeAnyMsg.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAnyMsg_lower(_ value: AnyMsg) -> RustBuffer {
    return FfiConverterTypeAnyMsg.lower(value)
}


/**
 * Response to GetTx
 */
public struct GetTxResponse {
    /**
     * Response Transaction
     */
    public var tx: Tx
    /**
     * TxResponse to a Query
     */
    public var txResponse: TxResponse

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Response Transaction
         */tx: Tx, 
        /**
         * TxResponse to a Query
         */txResponse: TxResponse) {
        self.tx = tx
        self.txResponse = txResponse
    }
}

#if compiler(>=6)
extension GetTxResponse: Sendable {}
#endif


extension GetTxResponse: Equatable, Hashable {
    public static func ==(lhs: GetTxResponse, rhs: GetTxResponse) -> Bool {
        if lhs.tx != rhs.tx {
            return false
        }
        if lhs.txResponse != rhs.txResponse {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(tx)
        hasher.combine(txResponse)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGetTxResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GetTxResponse {
        return
            try GetTxResponse(
                tx: FfiConverterTypeTx.read(from: &buf), 
                txResponse: FfiConverterTypeTxResponse.read(from: &buf)
        )
    }

    public static func write(_ value: GetTxResponse, into buf: inout [UInt8]) {
        FfiConverterTypeTx.write(value.tx, into: &buf)
        FfiConverterTypeTxResponse.write(value.txResponse, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetTxResponse_lift(_ buf: RustBuffer) throws -> GetTxResponse {
    return try FfiConverterTypeGetTxResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGetTxResponse_lower(_ value: GetTxResponse) -> RustBuffer {
    return FfiConverterTypeGetTxResponse.lower(value)
}


public struct Height {
    public var value: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(value: UInt64) {
        self.value = value
    }
}

#if compiler(>=6)
extension Height: Sendable {}
#endif


extension Height: Equatable, Hashable {
    public static func ==(lhs: Height, rhs: Height) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHeight: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Height {
        return
            try Height(
                value: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: Height, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.value, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHeight_lift(_ buf: RustBuffer) throws -> Height {
    return try FfiConverterTypeHeight.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHeight_lower(_ value: Height) -> RustBuffer {
    return FfiConverterTypeHeight.lower(value)
}


public struct Signature {
    public var bytes: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(bytes: Data) {
        self.bytes = bytes
    }
}

#if compiler(>=6)
extension Signature: Sendable {}
#endif


extension Signature: Equatable, Hashable {
    public static func ==(lhs: Signature, rhs: Signature) -> Bool {
        if lhs.bytes != rhs.bytes {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bytes)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignature: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Signature {
        return
            try Signature(
                bytes: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: Signature, into buf: inout [UInt8]) {
        FfiConverterData.write(value.bytes, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignature_lift(_ buf: RustBuffer) throws -> Signature {
    return try FfiConverterTypeSignature.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSignature_lower(_ value: Signature) -> RustBuffer {
    return FfiConverterTypeSignature.lower(value)
}


/**
 * Configuration for the transaction.
 */
public struct TxConfig {
    /**
     * Custom gas limit for the transaction (in `utia`).
     */
    public var gasLimit: UInt64?
    /**
     * Custom gas price for fee calculation.
     */
    public var gasPrice: Double?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Custom gas limit for the transaction (in `utia`).
         */gasLimit: UInt64?, 
        /**
         * Custom gas price for fee calculation.
         */gasPrice: Double?) {
        self.gasLimit = gasLimit
        self.gasPrice = gasPrice
    }
}

#if compiler(>=6)
extension TxConfig: Sendable {}
#endif


extension TxConfig: Equatable, Hashable {
    public static func ==(lhs: TxConfig, rhs: TxConfig) -> Bool {
        if lhs.gasLimit != rhs.gasLimit {
            return false
        }
        if lhs.gasPrice != rhs.gasPrice {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(gasLimit)
        hasher.combine(gasPrice)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTxConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TxConfig {
        return
            try TxConfig(
                gasLimit: FfiConverterOptionUInt64.read(from: &buf), 
                gasPrice: FfiConverterOptionDouble.read(from: &buf)
        )
    }

    public static func write(_ value: TxConfig, into buf: inout [UInt8]) {
        FfiConverterOptionUInt64.write(value.gasLimit, into: &buf)
        FfiConverterOptionDouble.write(value.gasPrice, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTxConfig_lift(_ buf: RustBuffer) throws -> TxConfig {
    return try FfiConverterTypeTxConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTxConfig_lower(_ value: TxConfig) -> RustBuffer {
    return FfiConverterTypeTxConfig.lower(value)
}


/**
 * A result of correctly submitted transaction.
 */
public struct TxInfo {
    /**
     * Hash of the transaction.
     */
    public var hash: TendermintHash
    /**
     * Height at which transaction was submitted.
     */
    public var height: TendermintHeight

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Hash of the transaction.
         */hash: TendermintHash, 
        /**
         * Height at which transaction was submitted.
         */height: TendermintHeight) {
        self.hash = hash
        self.height = height
    }
}

#if compiler(>=6)
extension TxInfo: Sendable {}
#endif


extension TxInfo: Equatable, Hashable {
    public static func ==(lhs: TxInfo, rhs: TxInfo) -> Bool {
        if lhs.hash != rhs.hash {
            return false
        }
        if lhs.height != rhs.height {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hash)
        hasher.combine(height)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTxInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TxInfo {
        return
            try TxInfo(
                hash: FfiConverterTypeTendermintHash.read(from: &buf), 
                height: FfiConverterTypeTendermintHeight.read(from: &buf)
        )
    }

    public static func write(_ value: TxInfo, into buf: inout [UInt8]) {
        FfiConverterTypeTendermintHash.write(value.hash, into: &buf)
        FfiConverterTypeTendermintHeight.write(value.height, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTxInfo_lift(_ buf: RustBuffer) throws -> TxInfo {
    return try FfiConverterTypeTxInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTxInfo_lower(_ value: TxInfo) -> RustBuffer {
    return FfiConverterTypeTxInfo.lower(value)
}


/**
 * Response to a tx status query
 */
public struct TxStatusResponse {
    /**
     * Height of the block in which the transaction was committed.
     */
    public var height: TendermintHeight
    /**
     * Index of the transaction in block.
     */
    public var index: UInt32
    /**
     * Execution_code is returned when the transaction has been committed
     * and returns whether it was successful or errored. A non zero
     * execution code indicates an error.
     */
    public var executionCode: ErrorCode
    /**
     * Error log, if transaction failed.
     */
    public var error: String
    /**
     * Status of the transaction.
     */
    public var status: TxStatus

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Height of the block in which the transaction was committed.
         */height: TendermintHeight, 
        /**
         * Index of the transaction in block.
         */index: UInt32, 
        /**
         * Execution_code is returned when the transaction has been committed
         * and returns whether it was successful or errored. A non zero
         * execution code indicates an error.
         */executionCode: ErrorCode, 
        /**
         * Error log, if transaction failed.
         */error: String, 
        /**
         * Status of the transaction.
         */status: TxStatus) {
        self.height = height
        self.index = index
        self.executionCode = executionCode
        self.error = error
        self.status = status
    }
}

#if compiler(>=6)
extension TxStatusResponse: Sendable {}
#endif


extension TxStatusResponse: Equatable, Hashable {
    public static func ==(lhs: TxStatusResponse, rhs: TxStatusResponse) -> Bool {
        if lhs.height != rhs.height {
            return false
        }
        if lhs.index != rhs.index {
            return false
        }
        if lhs.executionCode != rhs.executionCode {
            return false
        }
        if lhs.error != rhs.error {
            return false
        }
        if lhs.status != rhs.status {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(height)
        hasher.combine(index)
        hasher.combine(executionCode)
        hasher.combine(error)
        hasher.combine(status)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTxStatusResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TxStatusResponse {
        return
            try TxStatusResponse(
                height: FfiConverterTypeTendermintHeight.read(from: &buf), 
                index: FfiConverterUInt32.read(from: &buf), 
                executionCode: FfiConverterTypeErrorCode.read(from: &buf), 
                error: FfiConverterString.read(from: &buf), 
                status: FfiConverterTypeTxStatus.read(from: &buf)
        )
    }

    public static func write(_ value: TxStatusResponse, into buf: inout [UInt8]) {
        FfiConverterTypeTendermintHeight.write(value.height, into: &buf)
        FfiConverterUInt32.write(value.index, into: &buf)
        FfiConverterTypeErrorCode.write(value.executionCode, into: &buf)
        FfiConverterString.write(value.error, into: &buf)
        FfiConverterTypeTxStatus.write(value.status, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTxStatusResponse_lift(_ buf: RustBuffer) throws -> TxStatusResponse {
    return try FfiConverterTypeTxStatusResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTxStatusResponse_lower(_ value: TxStatusResponse) -> RustBuffer {
    return FfiConverterTypeTxStatusResponse.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Enum representing different types of account
 */

public enum Account {
    
    /**
     * Base account type
     */
    case base(BaseAccount
    )
    /**
     * Account for modules that holds coins on a pool
     */
    case module(ModuleAccount
    )
}


#if compiler(>=6)
extension Account: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAccount: FfiConverterRustBuffer {
    typealias SwiftType = Account

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Account {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .base(try FfiConverterTypeBaseAccount.read(from: &buf)
        )
        
        case 2: return .module(try FfiConverterTypeModuleAccount.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Account, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .base(v1):
            writeInt(&buf, Int32(1))
            FfiConverterTypeBaseAccount.write(v1, into: &buf)
            
        
        case let .module(v1):
            writeInt(&buf, Int32(2))
            FfiConverterTypeModuleAccount.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccount_lift(_ buf: RustBuffer) throws -> Account {
    return try FfiConverterTypeAccount.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAccount_lower(_ value: Account) -> RustBuffer {
    return FfiConverterTypeAccount.lower(value)
}


extension Account: Equatable, Hashable {}







public enum GrpcError: Swift.Error {

    
    
    case GrpcError(msg: String
    )
    case InvalidAccountPublicKey(msg: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGrpcError: FfiConverterRustBuffer {
    typealias SwiftType = GrpcError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GrpcError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .GrpcError(
            msg: try FfiConverterString.read(from: &buf)
            )
        case 2: return .InvalidAccountPublicKey(
            msg: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GrpcError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .GrpcError(msg):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(msg, into: &buf)
            
        
        case let .InvalidAccountPublicKey(msg):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(msg, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGrpcError_lift(_ buf: RustBuffer) throws -> GrpcError {
    return try FfiConverterTypeGrpcError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGrpcError_lower(_ value: GrpcError) -> RustBuffer {
    return FfiConverterTypeGrpcError.lower(value)
}


extension GrpcError: Equatable, Hashable {}




extension GrpcError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Hash {
    
    case sha256(hash: Data
    )
    case none
}


#if compiler(>=6)
extension Hash: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHash: FfiConverterRustBuffer {
    typealias SwiftType = Hash

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Hash {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .sha256(hash: try FfiConverterData.read(from: &buf)
        )
        
        case 2: return .none
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Hash, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .sha256(hash):
            writeInt(&buf, Int32(1))
            FfiConverterData.write(hash, into: &buf)
            
        
        case .none:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHash_lift(_ buf: RustBuffer) throws -> Hash {
    return try FfiConverterTypeHash.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHash_lower(_ value: Hash) -> RustBuffer {
    return FfiConverterTypeHash.lower(value)
}


extension Hash: Equatable, Hashable {}







public enum SigningError: Swift.Error {

    
    
    case SigningError(msg: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSigningError: FfiConverterRustBuffer {
    typealias SwiftType = SigningError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SigningError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .SigningError(
            msg: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SigningError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .SigningError(msg):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(msg, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSigningError_lift(_ buf: RustBuffer) throws -> SigningError {
    return try FfiConverterTypeSigningError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSigningError_lower(_ value: SigningError) -> RustBuffer {
    return FfiConverterTypeSigningError.lower(value)
}


extension SigningError: Equatable, Hashable {}




extension SigningError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Represents state of the transaction in the mempool
 */

public enum TxStatus {
    
    /**
     * The transaction is not known to the node, it could be never sent.
     */
    case unknown
    /**
     * The transaction is still pending.
     */
    case pending
    /**
     * The transaction was evicted from the mempool.
     */
    case evicted
    /**
     * The transaction was committed into the block.
     */
    case committed
}


#if compiler(>=6)
extension TxStatus: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTxStatus: FfiConverterRustBuffer {
    typealias SwiftType = TxStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TxStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .unknown
        
        case 2: return .pending
        
        case 3: return .evicted
        
        case 4: return .committed
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TxStatus, into buf: inout [UInt8]) {
        switch value {
        
        
        case .unknown:
            writeInt(&buf, Int32(1))
        
        
        case .pending:
            writeInt(&buf, Int32(2))
        
        
        case .evicted:
            writeInt(&buf, Int32(3))
        
        
        case .committed:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTxStatus_lift(_ buf: RustBuffer) throws -> TxStatus {
    return try FfiConverterTypeTxStatus.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTxStatus_lower(_ value: TxStatus) -> RustBuffer {
    return FfiConverterTypeTxStatus.lower(value)
}


extension TxStatus: Equatable, Hashable {}






#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDouble: FfiConverterRustBuffer {
    typealias SwiftType = Double?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDouble.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDouble.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeTxConfig: FfiConverterRustBuffer {
    typealias SwiftType = TxConfig?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeTxConfig.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeTxConfig.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeBlob: FfiConverterRustBuffer {
    typealias SwiftType = [Blob]

    public static func write(_ value: [Blob], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeBlob.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Blob] {
        let len: Int32 = try readInt(&buf)
        var seq = [Blob]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeBlob.read(from: &buf))
        }
        return seq
    }
}


/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias TendermintHash = Hash

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTendermintHash: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TendermintHash {
        return try FfiConverterTypeHash.read(from: &buf)
    }

    public static func write(_ value: TendermintHash, into buf: inout [UInt8]) {
        return FfiConverterTypeHash.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> TendermintHash {
        return try FfiConverterTypeHash_lift(value)
    }

    public static func lower(_ value: TendermintHash) -> RustBuffer {
        return FfiConverterTypeHash_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTendermintHash_lift(_ value: RustBuffer) throws -> TendermintHash {
    return try FfiConverterTypeTendermintHash.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTendermintHash_lower(_ value: TendermintHash) -> RustBuffer {
    return FfiConverterTypeTendermintHash.lower(value)
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias TendermintHeight = Height

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTendermintHeight: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TendermintHeight {
        return try FfiConverterTypeHeight.read(from: &buf)
    }

    public static func write(_ value: TendermintHeight, into buf: inout [UInt8]) {
        return FfiConverterTypeHeight.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> TendermintHeight {
        return try FfiConverterTypeHeight_lift(value)
    }

    public static func lower(_ value: TendermintHeight) -> RustBuffer {
        return FfiConverterTypeHeight_lower(value)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTendermintHeight_lift(_ value: RustBuffer) throws -> TendermintHeight {
    return try FfiConverterTypeTendermintHeight.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTendermintHeight_lower(_ value: TendermintHeight) -> RustBuffer {
    return FfiConverterTypeTendermintHeight.lower(value)
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call the ensure init function since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureCelestiaGrpcInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}
private func uniffiTraitInterfaceCallAsync<T>(
    makeCall: @escaping () async throws -> T,
    handleSuccess: @escaping (T) -> (),
    handleError: @escaping (Int8, RustBuffer) -> ()
) -> UniffiForeignFuture {
    let task = Task {
        do {
            handleSuccess(try await makeCall())
        } catch {
            handleError(CALL_UNEXPECTED_ERROR, FfiConverterString.lower(String(describing: error)))
        }
    }
    let handle = UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.insert(obj: task)
    return UniffiForeignFuture(handle: handle, free: uniffiForeignFutureFree)

}

private func uniffiTraitInterfaceCallAsyncWithError<T, E>(
    makeCall: @escaping () async throws -> T,
    handleSuccess: @escaping (T) -> (),
    handleError: @escaping (Int8, RustBuffer) -> (),
    lowerError: @escaping (E) -> RustBuffer
) -> UniffiForeignFuture {
    let task = Task {
        do {
            handleSuccess(try await makeCall())
        } catch let error as E {
            handleError(CALL_ERROR, lowerError(error))
        } catch {
            handleError(CALL_UNEXPECTED_ERROR, FfiConverterString.lower(String(describing: error)))
        }
    }
    let handle = UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.insert(obj: task)
    return UniffiForeignFuture(handle: handle, free: uniffiForeignFutureFree)
}

// Borrow the callback handle map implementation to store foreign future handles
// TODO: consolidate the handle-map code (https://github.com/mozilla/uniffi-rs/pull/1823)
fileprivate let UNIFFI_FOREIGN_FUTURE_HANDLE_MAP = UniffiHandleMap<UniffiForeignFutureTask>()

// Protocol for tasks that handle foreign futures.
//
// Defining a protocol allows all tasks to be stored in the same handle map.  This can't be done
// with the task object itself, since has generic parameters.
fileprivate protocol UniffiForeignFutureTask {
    func cancel()
}

extension Task: UniffiForeignFutureTask {}

private func uniffiForeignFutureFree(handle: UInt64) {
    do {
        let task = try UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.remove(handle: handle)
        // Set the cancellation flag on the task.  If it's still running, the code can check the
        // cancellation flag or call `Task.checkCancellation()`.  If the task has completed, this is
        // a no-op.
        task.cancel()
    } catch {
        print("uniffiForeignFutureFree: handle missing from handlemap")
    }
}

// For testing
public func uniffiForeignFutureHandleCountCelestiaGrpc() -> Int {
    UNIFFI_FOREIGN_FUTURE_HANDLE_MAP.count
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_celestia_grpc_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_celestia_grpc_checksum_method_txclient_app_version() != 734) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_celestia_grpc_checksum_method_txclient_last_seen_gas_price() != 24951) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_celestia_grpc_checksum_method_txclient_submit_blobs() != 56846) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_celestia_grpc_checksum_method_txclient_submit_message() != 20816) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_celestia_grpc_checksum_method_uniffisigner_sign() != 64725) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_celestia_grpc_checksum_constructor_txclient_new() != 58491) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitUniffiSigner()
    uniffiEnsureCelestiaTypesInitialized()
    uniffiEnsureCelestiaProtoInitialized()
    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureCelestiaGrpcInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all